// Generated by gencpp from file retina_view/Track.msg
// DO NOT EDIT!


#ifndef RETINA_VIEW_MESSAGE_TRACK_H
#define RETINA_VIEW_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace retina_view
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : trackcount(0)
    , x(0.0)
    , y(0.0)  {
    }
  Track_(const ContainerAllocator& _alloc)
    : trackcount(0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _trackcount_type;
  _trackcount_type trackcount;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::retina_view::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::retina_view::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::retina_view::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::retina_view::Track > TrackPtr;
typedef boost::shared_ptr< ::retina_view::Track const> TrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::retina_view::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::retina_view::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::retina_view::Track_<ContainerAllocator1> & lhs, const ::retina_view::Track_<ContainerAllocator2> & rhs)
{
  return lhs.trackcount == rhs.trackcount &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::retina_view::Track_<ContainerAllocator1> & lhs, const ::retina_view::Track_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace retina_view

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::retina_view::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::retina_view::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::retina_view::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::retina_view::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::retina_view::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::retina_view::Track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::retina_view::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f96e8039087b026ff930b0cd4e3c11fe";
  }

  static const char* value(const ::retina_view::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf96e8039087b026fULL;
  static const uint64_t static_value2 = 0xf930b0cd4e3c11feULL;
};

template<class ContainerAllocator>
struct DataType< ::retina_view::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "retina_view/Track";
  }

  static const char* value(const ::retina_view::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::retina_view::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 trackcount\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::retina_view::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::retina_view::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trackcount);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::retina_view::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::retina_view::Track_<ContainerAllocator>& v)
  {
    s << indent << "trackcount: ";
    Printer<int8_t>::stream(s, indent + "  ", v.trackcount);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RETINA_VIEW_MESSAGE_TRACK_H
